/**
 * material_lambertian.vp
 * 
 * Vertex shader shader which writes material information needed for Lambertian shading to
 * the gbuffer.
 * 
 * Written for Cornell CS 5625 (Interactive Computer Graphics).
 * Copyright (c) 2012, Computer Science Department, Cornell University.
 * 
 * @author Asher Dunn (ad488)
 * @date 2012-03-27
 */

/* Pass eyespace position and normal, and texcoord, to the fragment shader. */
varying vec3 EyespacePosition;
varying vec3 EyespaceNormal;
varying vec2 TexCoord;

/* Textures and flags for whether they exist. */
uniform float SamplerWidth;
uniform float SamplerHeight;
uniform float HeightFactor;

uniform sampler2DRect SandDuneHeightMap;
uniform bool HasSandDuneHeightMap;


const float sampleRadius = 5.0;

void main()
{
	TexCoord = vec2(gl_MultiTexCoord0);
	TexCoord.x *= SamplerWidth;
	TexCoord.y *= SamplerHeight;
	vec4 newVertexPos = gl_Vertex;
	vec3 bump = gl_Normal;
	
	if (HasSandDuneHeightMap){
		vec4 dv = vec4(0.0);
		for(float i = -sampleRadius ; i <= sampleRadius; i += 1.0 ){
			for(float j = -sampleRadius ; j <= sampleRadius; j += 1.0 ){
				dv += texture2DRect(SandDuneHeightMap,vec2(TexCoord.x + i, TexCoord.y + j));
			}
		}
		dv /= (sampleRadius+1.0) * (sampleRadius+1.0);
		newVertexPos = vec4(0.0, HeightFactor * (dv.x) - 0.5 * HeightFactor , 0.0, 0.0) + gl_Vertex;	
	}
	
	

	gl_Position = gl_ModelViewProjectionMatrix * newVertexPos;
	EyespacePosition = vec3(gl_ModelViewMatrix * newVertexPos);
	EyespaceNormal = normalize(gl_NormalMatrix * bump);	
}
